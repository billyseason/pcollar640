; Generated by holtek-gcc v3.14, Wed May 30 19:21:49 2018
; 
; Configuration:
;       without long instruction
;       Single ROM, Multi-RAM
;       bits_per_rom_unit:16
;       with mp1
;       with tbhp, address(0x9)
;          Use tabrd-const
;       
;       
;       
; use 'tabrdc' instead of 'tabrd'
;       

#pragma translator "holtek-gcc 4.6.4" "3.14" "build 20130711"
; Rebuild 10

ir equ [2]
mp equ [3]
sbp equ [1]
acc equ [5]
bp equ [4]
tblp equ [7]
tbhp equ [9]
status equ [10]
c equ [10].0
ac equ [10].1
z equ [10].2
ov equ [10].3
intc equ [11]

extern ra:byte
extern rb:byte
extern rc:byte
extern rd:byte
extern re:byte
extern rf:byte
extern rg:byte
extern rh:byte
extern _Crom2Prom:near
extern _Crom2PromNext:near

RAMBANK 0 @HCCINIT, @HCCINIT0

RAMBANK 0 @BITDATASEC, @BITDATASEC1
@HCCINIT	.section 'data'
@HCCINIT0	.section 'data'
@BITDATASEC	 .section 'data'
@BITDATASEC1	 .section 'data'

#pragma debug scope 1 1
	extern __DELAY3:near
	extern __DELAYX3:near
	extern __DELAYX6:near
	extern __DELAYY5:near
	extern __DELAYY3:near
	extern _builtin_holtek_delay_2:byte
public _c_cmt_init
@crom	.section 'crom'
#line 13 "G:\xml\640\HT66F018\head.h"
@crom	.section	'crom'
_c_cmt_init:
#pragma debug array 42 8 96 1
#pragma debug variable 42 1 _c_cmt_init "c_cmt_init"
	db 2
	db 102
	db -20
	db 28
	db -16
	db -128
	db 20
	db 8
	db -111
	db 2
	db 2
	db -48
	db -82
	db -6
	db 80
	db -48
	db 113
	db -12
	db 16
	db 83
	db 114
	db 32
	db 64
	db 1
	db 66
	db 113
	db -50
	db 28
	db 66
	db 91
	db 28
	db 28
	db 50
	db 24
	db 0
	db -103
	db -63
	db -101
	db 6
	db 10
	db -97
	db 57
	db 41
	db 41
	db -64
	db 81
	db 42
	db 83
	db 0
	db 0
	db -76
	db 0
	db 0
	db 1
	db 0
	db 0
	db 18
	db 8
	db 0
	db -86
	db 2
	db 0
	db 0
	db 0
	db 0
	db 0
	db 0
	db -44
	db 45
	db 0
	db 3
	db 0
	db 0
	db 0
	db 0
	db 0
	db 0
	db 0
	db 0
	db 96
	db -1
	db 1
	db 0
	db 31
	db 16
	db 80
	db 38
	db 3
	db 0
	db 66
	db -80
	db 0
	db 1
	db 1
	db 63
	db 127
#line 6 "G:\xml\640\HT66F018\HT66F018.c"
public _a_100ms
@HCCINIT0 .section 'data'
_a_100ms	db 0
#pragma debug variable 8 1 _a_100ms "a_100ms"

@HCCINIT .section 'data'
#line 9 "G:\xml\640\HT66F018\HT66F018.c"
public _a_count
@HCCINIT0 .section 'data'
_a_count	db 0
#pragma debug variable 8 1 _a_count "a_count"

@HCCINIT .section 'data'
#line 6 "G:\xml\640\HT66F018\HT66F018.c"
public _a_10ms
@HCCINIT0 .section 'data'
_a_10ms	db 0
#pragma debug variable 8 1 _a_10ms "a_10ms"

@HCCINIT .section 'data'
#line 7 "G:\xml\640\HT66F018\HT66F018.c"
public _a_k1_high
@HCCINIT0 .section 'data'
_a_k1_high	db 0
#pragma debug variable 8 1 _a_k1_high "a_k1_high"

@HCCINIT .section 'data'
#line 7 "G:\xml\640\HT66F018\HT66F018.c"
public _a_k1_low
@HCCINIT0 .section 'data'
_a_k1_low	db 0
#pragma debug variable 8 1 _a_k1_low "a_k1_low"

@HCCINIT .section 'data'
#line 7 "G:\xml\640\HT66F018\HT66F018.c"
public _a_k2_high
@HCCINIT0 .section 'data'
_a_k2_high	db 0
#pragma debug variable 8 1 _a_k2_high "a_k2_high"

@HCCINIT .section 'data'
#line 7 "G:\xml\640\HT66F018\HT66F018.c"
public _a_k2_low
@HCCINIT0 .section 'data'
_a_k2_low	db 0
#pragma debug variable 8 1 _a_k2_low "a_k2_low"

@HCCINIT .section 'data'
#line 7 "G:\xml\640\HT66F018\HT66F018.c"
public _a_k3_high
@HCCINIT0 .section 'data'
_a_k3_high	db 0
#pragma debug variable 8 1 _a_k3_high "a_k3_high"

@HCCINIT .section 'data'
#line 7 "G:\xml\640\HT66F018\HT66F018.c"
public _a_k3_low
@HCCINIT0 .section 'data'
_a_k3_low	db 0
#pragma debug variable 8 1 _a_k3_low "a_k3_low"

@HCCINIT .section 'data'
#line 7 "G:\xml\640\HT66F018\HT66F018.c"
public _a_k4_high
@HCCINIT0 .section 'data'
_a_k4_high	db 0
#pragma debug variable 8 1 _a_k4_high "a_k4_high"

@HCCINIT .section 'data'
#line 7 "G:\xml\640\HT66F018\HT66F018.c"
public _a_k4_low
@HCCINIT0 .section 'data'
_a_k4_low	db 0
#pragma debug variable 8 1 _a_k4_low "a_k4_low"

@HCCINIT .section 'data'
#line 7 "G:\xml\640\HT66F018\HT66F018.c"
public _a_k5_high
@HCCINIT0 .section 'data'
_a_k5_high	db 0
#pragma debug variable 8 1 _a_k5_high "a_k5_high"

@HCCINIT .section 'data'
#line 7 "G:\xml\640\HT66F018\HT66F018.c"
public _a_k5_low
@HCCINIT0 .section 'data'
_a_k5_low	db 0
#pragma debug variable 8 1 _a_k5_low "a_k5_low"

@HCCINIT .section 'data'
#line 8 "G:\xml\640\HT66F018\HT66F018.c"
public _f_flag
@HCCINIT0 .section 'data'
_f_flag	db 2 dup(0)
#pragma debug struct_begin 43 ""
#pragma debug field 21 8 0 1 "f_bz" ;0,1
#pragma debug field 21 8 0 1 "f_k2" ;1,1
#pragma debug field 21 8 0 1 "f_k3" ;2,1
#pragma debug field 21 8 0 1 "f_k4" ;3,1
#pragma debug field 21 8 0 1 "f_k5" ;4,1
#pragma debug field 21 8 0 1 "f_k1_buf" ;5,1
#pragma debug field 21 8 0 1 "f_k2_buf" ;6,1
#pragma debug field 21 8 0 1 "f_k3_buf" ;7,1
#pragma debug field 21 8 1 1 "f_k4_buf" ;8,1
#pragma debug field 21 8 0 1 "f_k5_buf" ;9,1
#pragma debug field 21 8 0 1 "f_10ms" ;10,1
#pragma debug field 21 8 0 1 "f_tx" ;11,1
#pragma debug struct_end
#pragma debug variable 43 1 _f_flag "f_flag"

@HCCINIT .section 'data'
#line 9 "G:\xml\640\HT66F018\HT66F018.c"
public _a_data
@HCCINIT0 .section 'data'
_a_data	db 0
#pragma debug variable 8 1 _a_data "a_data"

@HCCINIT .section 'data'
#line 9 "G:\xml\640\HT66F018\HT66F018.c"
public _a_rx
@HCCINIT0 .section 'data'
_a_rx	db 4 dup(0)
#pragma debug array 44 8 4 1
#pragma debug variable 44 1 _a_rx "a_rx"

@HCCINIT .section 'data'
#line 9 "G:\xml\640\HT66F018\HT66F018.c"
public _a_read
@HCCINIT0 .section 'data'
_a_read	db 32 dup(0)
#pragma debug array 45 8 32 1
#pragma debug variable 45 1 _a_read "a_read"

@HCCINIT .section 'data'
#line 10 "G:\xml\640\HT66F018\HT66F018.c"
public _a_bz
@HCCINIT0 .section 'data'
_a_bz	db 2 dup(0)
#pragma debug variable 12 1 _a_bz "a_bz"

@HCCINIT .section 'data'
___mfi1 equ [18]
___pb equ [37]
public _TM1_int
#pragma debug scope 2 1
#line 15 "G:\xml\640\HT66F018\HT66F018.c"
@TM1_int_code .section at 16 'code'
	mov r1,a
	mov a,status
	mov r2,a
	jmp _TM1_int
#pragma debug scope 1 1
@dummy16 proc
	call _TM1_int
@dummy16 endp
#pragma debug scope 3 1
_TM1_int .section 'code'
_TM1_int proc
#line 16 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,[18]
	mov ra,a
	mov a,32
	andm a,ra
	sz ra
	jmp _LI1
	jmp _L1
_LI1:
#line 18 "G:\xml\640\HT66F018\HT66F018.c"
	clr [18].5
#line 19 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_f_flag[0]
	mov ra,a
	mov a,1
	andm a,ra
	sz ra
	jmp _LI2
	jmp _L3
_LI2:
#line 21 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_a_bz[0]
	mov ra,a
	mov a,_a_bz[1]
	mov rb,a
	mov a,255
	add a,ra
	mov rc,a
	mov a,255
	adc a,rb
	mov rd,a
	mov a,rc
	mov _a_bz[0],a
	mov a,rd
	mov _a_bz[1],a
	mov a,ra
	or a,rb
	sz z
	jmp _L4
	mov a,[37]
	mov ra,a
	mov a,1
	andm a,ra
	mov a,1
	xorm a,ra
	mov a,1
	andm a,ra
	mov a,1
	andm a,ra
	clr [37].0
	mov a,ra
	orm a,[37]
	jmp _L6
_L4:
#line 22 "G:\xml\640\HT66F018\HT66F018.c"
	clr _f_flag[0].0
	jmp _L6
_L3:
#line 24 "G:\xml\640\HT66F018\HT66F018.c"
	clr [37].0
_L6:
#line 25 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_a_10ms[0]
	mov ra,a
	inc ra
	mov a,ra
	mov _a_10ms[0],a
#line 26 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_a_10ms[0]
	mov ra,a
	mov a,79
	sub a,ra
	sz c
	jmp _L7
#line 28 "G:\xml\640\HT66F018\HT66F018.c"
	clr _a_10ms[0]
#line 29 "G:\xml\640\HT66F018\HT66F018.c"
	set _f_flag[1].2
_L7:
#line 31 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_a_100ms[0]
	mov ra,a
	inc ra
	mov a,ra
	mov _a_100ms[0],a
_L1:
	mov a,r2
	mov status,a
	mov a,r1
	reti
_TM1_int endp

#line 31 "G:\xml\640\HT66F018\HT66F018.c"
#pragma debug scope 1 1
___pa equ [20]
___pac equ [21]
public _FIFO_READ
#pragma debug scope 4 1
#line 43 "G:\xml\640\HT66F018\HT66F018.c"
_FIFO_READ .section 'code'
_FIFO_READ proc
    local _FIFO_READ_2 db 4 dup(?)	; 0,4
	mov _FIFO_READ_2[3],a
#pragma debug variable 8 4 _FIFO_READ_2+3 "len"
#pragma debug variable 8 4 _FIFO_READ_2+0 "i"
#pragma debug variable 8 4 _FIFO_READ_2+1 "j"
#pragma debug variable 8 4 _FIFO_READ_2+2 "data"
#line 45 "G:\xml\640\HT66F018\HT66F018.c"
	set [20].7
#line 46 "G:\xml\640\HT66F018\HT66F018.c"
	clr [37].3
#line 47 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 48 "G:\xml\640\HT66F018\HT66F018.c"
	set [21].5
#line 49 "G:\xml\640\HT66F018\HT66F018.c"
	clr _FIFO_READ_2[1]
	jmp _L9
_L15:
#line 51 "G:\xml\640\HT66F018\HT66F018.c"
	clr [37].3
#line 52 "G:\xml\640\HT66F018\HT66F018.c"
	clr _FIFO_READ_2[0]
	jmp _L10
_L14:
#line 54 "G:\xml\640\HT66F018\HT66F018.c"
	clr _FIFO_READ_2[2]
#line 55 "G:\xml\640\HT66F018\HT66F018.c"
	clr _FIFO_READ_2[0]
	jmp _L11
_L13:
#line 57 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_FIFO_READ_2[2]
	mov ra,a
	mov a,ra
	addm a,ra
	mov a,ra
	mov _FIFO_READ_2[2],a
#line 58 "G:\xml\640\HT66F018\HT66F018.c"
	set [20].4
#line 59 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,[20]
	mov ra,a
	mov a,32
	andm a,ra
	sz ra
	jmp _LI3
	jmp _L12
_LI3:
	set _FIFO_READ_2[2].0
_L12:
#line 60 "G:\xml\640\HT66F018\HT66F018.c"
;# 60 "G:\xml\640\HT66F018\HT66F018.c" 1
	nop
#line 61 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 55 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_FIFO_READ_2[0]
	mov ra,a
	inca ra
	mov _FIFO_READ_2[0],a
_L11:
	mov a,7
	sub a,_FIFO_READ_2[0]
	sz c
	jmp _L13
#line 52 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_FIFO_READ_2[0]
	mov ra,a
	inca ra
	mov _FIFO_READ_2[0],a
_L10:
	mov a,7
	sub a,_FIFO_READ_2[0]
	sz c
	jmp _L14
#line 64 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_FIFO_READ_2[1]
	mov ra,a
	clr rb
	mov a,low offset _a_rx
	addm a,ra
	mov a,high offset _a_rx
	adcm a,rb
	mov a,ra
	mov mp,a
	mov a,rb
	mov sbp,a
	mov a,sbp
	mov bp,a
	mov a,_FIFO_READ_2[2]
	mov ir,a
#line 65 "G:\xml\640\HT66F018\HT66F018.c"
	set [37].3
#line 66 "G:\xml\640\HT66F018\HT66F018.c"
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10>263690
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 10of the argument exceeds the maxinum 263690'
	ENDIF
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10<0
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 10 of the argument exceeds the mininum 0'
	ENDIF
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==0
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	JMP $
	ENDIF
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==1
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==2
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==3
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10<8) AND (10>3)
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAY3 + 7 -10
	ENDIF
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10< 0404h) AND (10>7)
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,10/4-1
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX3 + 3 -(10 MOD 4)
	ENDIF
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10< 0x40B) AND (10> 0403h)
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0 
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX6 + 0x40a -10
	ENDIF
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10 >= 0x40b) AND ((((10-9)%0402h)/4+1)>256)
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(10-9)/0402h
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY5 +5- (((10-9)%0402h)%6)
	ENDIF
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10 >= 0x40b) AND ((((10-9)%0402h)/4+1)<=256)
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(10-9)/0402h
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,((10-9)%0402h)/4+1
;# 66 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY3 +3-(((10-9)%0402h)%4)
	ENDIF
#line 49 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_FIFO_READ_2[1]
	mov ra,a
	inca ra
	mov _FIFO_READ_2[1],a
_L9:
	mov a,_FIFO_READ_2[1]
	sub a,_FIFO_READ_2[3]
	snz c
	jmp _L15
#line 68 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 69 "G:\xml\640\HT66F018\HT66F018.c"
	clr [21].5
#line 70 "G:\xml\640\HT66F018\HT66F018.c"
	set [37].3
	ret
_FIFO_READ endp
#line 70 "G:\xml\640\HT66F018\HT66F018.c"
#pragma debug scope 1 1
public _SPI_WRITE
#pragma debug scope 5 1
#line 74 "G:\xml\640\HT66F018\HT66F018.c"
_SPI_WRITE .section 'code'
_SPI_WRITE proc
public _SPI_WRITE_2
    local _SPI_WRITE_2 db 3 dup(?)	; 1,2
	mov _SPI_WRITE_2[2],a
#pragma debug variable 8 5 _SPI_WRITE_2+2 "address"
#pragma debug variable 8 5 _SPI_WRITE_2+0 "data"
#pragma debug variable 8 5 _SPI_WRITE_2+1 "i"
#line 76 "G:\xml\640\HT66F018\HT66F018.c"
	clr _SPI_WRITE_2[2].7
#line 77 "G:\xml\640\HT66F018\HT66F018.c"
	set [37].3
#line 78 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].7
#line 79 "G:\xml\640\HT66F018\HT66F018.c"
	clr [21].5
#line 80 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 81 "G:\xml\640\HT66F018\HT66F018.c"
	clr _SPI_WRITE_2[1]
	jmp _L17
_L20:
#line 83 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 84 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_WRITE_2[2]
	mov ra,a
	snz ra.7
	jmp _L18
	set [20].5
	jmp _L19
_L18:
#line 85 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].5
_L19:
#line 86 "G:\xml\640\HT66F018\HT66F018.c"
	set [20].4
#line 87 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_WRITE_2[2]
	mov ra,a
	mov a,ra
	addm a,ra
	mov a,ra
	mov _SPI_WRITE_2[2],a
#line 81 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_WRITE_2[1]
	mov ra,a
	inca ra
	mov _SPI_WRITE_2[1],a
_L17:
	mov a,7
	sub a,_SPI_WRITE_2[1]
	sz c
	jmp _L20
#line 89 "G:\xml\640\HT66F018\HT66F018.c"
	clr _SPI_WRITE_2[1]
	jmp _L21
_L24:
#line 91 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 92 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_WRITE_2[0]
	mov ra,a
	snz ra.7
	jmp _L22
	set [20].5
	jmp _L23
_L22:
#line 93 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].5
_L23:
#line 94 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_WRITE_2[0]
	mov ra,a
	mov a,ra
	addm a,ra
	mov a,ra
	mov _SPI_WRITE_2[0],a
#line 95 "G:\xml\640\HT66F018\HT66F018.c"
	set [20].4
#line 89 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_WRITE_2[1]
	mov ra,a
	inca ra
	mov _SPI_WRITE_2[1],a
_L21:
	mov a,7
	sub a,_SPI_WRITE_2[1]
	sz c
	jmp _L24
#line 97 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 98 "G:\xml\640\HT66F018\HT66F018.c"
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 5>263690
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 5of the argument exceeds the maxinum 263690'
	ENDIF
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 5<0
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 5 of the argument exceeds the mininum 0'
	ENDIF
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 5==0
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	JMP $
	ENDIF
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 5==1
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 5==2
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 5==3
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (5<8) AND (5>3)
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAY3 + 7 -5
	ENDIF
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (5< 0404h) AND (5>7)
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,5/4-1
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX3 + 3 -(5 MOD 4)
	ENDIF
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (5< 0x40B) AND (5> 0403h)
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0 
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX6 + 0x40a -5
	ENDIF
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (5 >= 0x40b) AND ((((5-9)%0402h)/4+1)>256)
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(5-9)/0402h
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY5 +5- (((5-9)%0402h)%6)
	ENDIF
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (5 >= 0x40b) AND ((((5-9)%0402h)/4+1)<=256)
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(5-9)/0402h
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,((5-9)%0402h)/4+1
;# 98 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY3 +3-(((5-9)%0402h)%4)
	ENDIF
#line 99 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].5
#line 100 "G:\xml\640\HT66F018\HT66F018.c"
	set [20].7
	ret
_SPI_WRITE endp
#line 100 "G:\xml\640\HT66F018\HT66F018.c"
#pragma debug scope 1 1
public _SPI_READ
#pragma debug scope 6 1
#line 104 "G:\xml\640\HT66F018\HT66F018.c"
_SPI_READ .section 'code'
_SPI_READ proc
    local _SPI_READ_2 db 3 dup(?)	; 0,3
	mov _SPI_READ_2[2],a
#pragma debug variable 8 6 _SPI_READ_2+2 "address"
#pragma debug variable 8 6 _SPI_READ_2+0 "i"
#pragma debug variable 8 6 _SPI_READ_2+1 "data"
#line 106 "G:\xml\640\HT66F018\HT66F018.c"
	set [37].3
#line 107 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].7
#line 108 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 109 "G:\xml\640\HT66F018\HT66F018.c"
	clr [21].5
#line 110 "G:\xml\640\HT66F018\HT66F018.c"
	set _SPI_READ_2[2].7
#line 111 "G:\xml\640\HT66F018\HT66F018.c"
	clr _SPI_READ_2[0]
	jmp _L26
_L29:
#line 113 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 114 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_READ_2[2]
	mov ra,a
	snz ra.7
	jmp _L27
	set [20].5
	jmp _L28
_L27:
#line 115 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].5
_L28:
#line 116 "G:\xml\640\HT66F018\HT66F018.c"
;# 116 "G:\xml\640\HT66F018\HT66F018.c" 1
	nop
#line 117 "G:\xml\640\HT66F018\HT66F018.c"
;# 117 "G:\xml\640\HT66F018\HT66F018.c" 1
	nop
#line 118 "G:\xml\640\HT66F018\HT66F018.c"
	set [20].4
#line 119 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_READ_2[2]
	mov ra,a
	mov a,ra
	addm a,ra
	mov a,ra
	mov _SPI_READ_2[2],a
#line 111 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_READ_2[0]
	mov ra,a
	inca ra
	mov _SPI_READ_2[0],a
_L26:
	mov a,7
	sub a,_SPI_READ_2[0]
	sz c
	jmp _L29
#line 121 "G:\xml\640\HT66F018\HT66F018.c"
	set [21].5
#line 122 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 123 "G:\xml\640\HT66F018\HT66F018.c"
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10>263690
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 10of the argument exceeds the maxinum 263690'
	ENDIF
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10<0
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 10 of the argument exceeds the mininum 0'
	ENDIF
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==0
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	JMP $
	ENDIF
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==1
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==2
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==3
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10<8) AND (10>3)
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAY3 + 7 -10
	ENDIF
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10< 0404h) AND (10>7)
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,10/4-1
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX3 + 3 -(10 MOD 4)
	ENDIF
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10< 0x40B) AND (10> 0403h)
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0 
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX6 + 0x40a -10
	ENDIF
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10 >= 0x40b) AND ((((10-9)%0402h)/4+1)>256)
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(10-9)/0402h
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY5 +5- (((10-9)%0402h)%6)
	ENDIF
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10 >= 0x40b) AND ((((10-9)%0402h)/4+1)<=256)
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(10-9)/0402h
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,((10-9)%0402h)/4+1
;# 123 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY3 +3-(((10-9)%0402h)%4)
	ENDIF
#line 124 "G:\xml\640\HT66F018\HT66F018.c"
	clr _SPI_READ_2[1]
#line 125 "G:\xml\640\HT66F018\HT66F018.c"
	clr _SPI_READ_2[0]
	jmp _L30
_L32:
#line 127 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_READ_2[1]
	mov ra,a
	mov a,ra
	addm a,ra
	mov a,ra
	mov _SPI_READ_2[1],a
#line 128 "G:\xml\640\HT66F018\HT66F018.c"
	set [20].4
#line 129 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,[20]
	mov ra,a
	mov a,32
	andm a,ra
	sz ra
	jmp _LI4
	jmp _L31
_LI4:
	set _SPI_READ_2[1].0
_L31:
#line 130 "G:\xml\640\HT66F018\HT66F018.c"
;# 130 "G:\xml\640\HT66F018\HT66F018.c" 1
	nop
#line 131 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 125 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_READ_2[0]
	mov ra,a
	inca ra
	mov _SPI_READ_2[0],a
_L30:
	mov a,7
	sub a,_SPI_READ_2[0]
	sz c
	jmp _L32
#line 133 "G:\xml\640\HT66F018\HT66F018.c"
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10>263690
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 10of the argument exceeds the maxinum 263690'
	ENDIF
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10<0
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 10 of the argument exceeds the mininum 0'
	ENDIF
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==0
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	JMP $
	ENDIF
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==1
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==2
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 10==3
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10<8) AND (10>3)
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAY3 + 7 -10
	ENDIF
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10< 0404h) AND (10>7)
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,10/4-1
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX3 + 3 -(10 MOD 4)
	ENDIF
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10< 0x40B) AND (10> 0403h)
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0 
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX6 + 0x40a -10
	ENDIF
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10 >= 0x40b) AND ((((10-9)%0402h)/4+1)>256)
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(10-9)/0402h
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY5 +5- (((10-9)%0402h)%6)
	ENDIF
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (10 >= 0x40b) AND ((((10-9)%0402h)/4+1)<=256)
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(10-9)/0402h
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,((10-9)%0402h)/4+1
;# 133 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY3 +3-(((10-9)%0402h)%4)
	ENDIF
#line 134 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].4
#line 135 "G:\xml\640\HT66F018\HT66F018.c"
	clr [21].5
#line 136 "G:\xml\640\HT66F018\HT66F018.c"
	clr [20].5
#line 137 "G:\xml\640\HT66F018\HT66F018.c"
	set [20].7
#line 138 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_SPI_READ_2[1]
	mov ra,a
#line 139 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,ra
	ret
_SPI_READ endp
#line 139 "G:\xml\640\HT66F018\HT66F018.c"
#pragma debug scope 1 1
public _CMT_init
#pragma debug scope 7 1
#line 142 "G:\xml\640\HT66F018\HT66F018.c"
_CMT_init .section 'code'
_CMT_init proc
    local _CMT_init_2 db 2 dup(?)	; 0,2
#pragma debug variable 8 7 _CMT_init_2+0 "tmp"
#pragma debug variable 8 7 _CMT_init_2+1 "back"
#line 144 "G:\xml\640\HT66F018\HT66F018.c"
	set _SPI_WRITE_2[0]
	mov a,127
	call _SPI_WRITE
#line 145 "G:\xml\640\HT66F018\HT66F018.c"
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 40000>263690
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 40000of the argument exceeds the maxinum 263690'
	ENDIF
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 40000<0
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 40000 of the argument exceeds the mininum 0'
	ENDIF
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 40000==0
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	JMP $
	ENDIF
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 40000==1
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 40000==2
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 40000==3
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (40000<8) AND (40000>3)
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAY3 + 7 -40000
	ENDIF
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (40000< 0404h) AND (40000>7)
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,40000/4-1
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX3 + 3 -(40000 MOD 4)
	ENDIF
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (40000< 0x40B) AND (40000> 0403h)
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0 
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX6 + 0x40a -40000
	ENDIF
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (40000 >= 0x40b) AND ((((40000-9)%0402h)/4+1)>256)
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(40000-9)/0402h
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY5 +5- (((40000-9)%0402h)%6)
	ENDIF
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (40000 >= 0x40b) AND ((((40000-9)%0402h)/4+1)<=256)
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(40000-9)/0402h
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,((40000-9)%0402h)/4+1
;# 145 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY3 +3-(((40000-9)%0402h)%4)
	ENDIF
#line 146 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,2
	mov _SPI_WRITE_2[0],a
	mov a,96
	call _SPI_WRITE
#line 148 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,97
	call _SPI_READ
	mov ra,a
	mov a,ra
	mov _CMT_init_2[0],a
#line 149 "G:\xml\640\HT66F018\HT66F018.c"
	set _CMT_init_2[0].4
#line 150 "G:\xml\640\HT66F018\HT66F018.c"
	clr _CMT_init_2[0].5
#line 151 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[0]
	mov _SPI_WRITE_2[0],a
	mov a,97
	call _SPI_WRITE
#line 154 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,98
	call _SPI_READ
	mov ra,a
	mov a,ra
	mov _CMT_init_2[0],a
#line 155 "G:\xml\640\HT66F018\HT66F018.c"
	set _CMT_init_2[0].5
#line 156 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[0]
	mov _SPI_WRITE_2[0],a
	mov a,98
	call _SPI_WRITE
#line 159 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,13
	call _SPI_READ
	mov ra,a
	mov a,ra
	mov _CMT_init_2[0],a
#line 160 "G:\xml\640\HT66F018\HT66F018.c"
	clr _CMT_init_2[0].7
#line 161 "G:\xml\640\HT66F018\HT66F018.c"
	clr _CMT_init_2[0].6
#line 162 "G:\xml\640\HT66F018\HT66F018.c"
	clr _CMT_init_2[0].5
#line 163 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[0]
	mov _SPI_WRITE_2[0],a
	mov a,13
	call _SPI_WRITE
#line 165 "G:\xml\640\HT66F018\HT66F018.c"
	set _SPI_WRITE_2[0]
	mov a,106
	call _SPI_WRITE
#line 166 "G:\xml\640\HT66F018\HT66F018.c"
	set _SPI_WRITE_2[0]
	mov a,107
	call _SPI_WRITE
#line 168 "G:\xml\640\HT66F018\HT66F018.c"
	clr _CMT_init_2[0]
	jmp _L35
_L36:
#line 170 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[0]
	mov ra,a
	clr rb
	mov a,low offset _c_cmt_init
	addm a,ra
	mov a,high offset _c_cmt_init
	adcm a,rb
	mov a,ra
	mov mp,a
	mov a,rb
	mov sbp,a
	call _Crom2Prom
	mov ra,a
	mov a,ra
	mov _SPI_WRITE_2[0],a
	mov a,_CMT_init_2[0]
	call _SPI_WRITE
#line 171 "G:\xml\640\HT66F018\HT66F018.c"
;# 171 "G:\xml\640\HT66F018\HT66F018.c" 1
	clr wdt
#line 168 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[0]
	mov ra,a
	inca ra
	mov _CMT_init_2[0],a
_L35:
	mov a,95
	sub a,_CMT_init_2[0]
	sz c
	jmp _L36
#line 177 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,32
	mov _SPI_WRITE_2[0],a
	mov a,101
	call _SPI_WRITE
#line 179 "G:\xml\640\HT66F018\HT66F018.c"
	set _CMT_init_2[0].5
#line 180 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[0]
	mov _SPI_WRITE_2[0],a
	mov a,102
	call _SPI_WRITE
#line 181 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,102
	call _SPI_READ
	mov ra,a
	mov a,ra
	mov _CMT_init_2[0],a
#line 185 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,25
	mov _CMT_init_2[0],a
#line 186 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[0]
	mov _SPI_WRITE_2[0],a
	mov a,103
	call _SPI_WRITE
#line 187 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,1
	mov _SPI_WRITE_2[0],a
	mov a,104
	call _SPI_WRITE
#line 191 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,105
	call _SPI_READ
	mov ra,a
	mov a,ra
	mov _CMT_init_2[0],a
#line 192 "G:\xml\640\HT66F018\HT66F018.c"
	clr _CMT_init_2[0].0
#line 193 "G:\xml\640\HT66F018\HT66F018.c"
	clr _CMT_init_2[0].2
#line 194 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[0]
	mov _SPI_WRITE_2[0],a
	mov a,105
	call _SPI_WRITE
#line 196 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,2
	mov _SPI_WRITE_2[0],a
	mov a,108
	call _SPI_WRITE
#line 198 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,8
	mov _SPI_WRITE_2[0],a
	mov a,96
	call _SPI_WRITE
#line 200 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,21
	call _SPI_READ
	mov ra,a
	mov a,ra
	mov _CMT_init_2[0],a
#line 201 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,13
	orm a,_CMT_init_2[0]
#line 202 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[0]
	mov _SPI_WRITE_2[0],a
	mov a,21
	call _SPI_WRITE
#line 204 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,16
	mov _SPI_WRITE_2[0],a
	mov a,96
	call _SPI_WRITE
#line 205 "G:\xml\640\HT66F018\HT66F018.c"
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 60000>263690
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 60000of the argument exceeds the maxinum 263690'
	ENDIF
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 60000<0
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	ERRMESSAGE 'the value 60000 of the argument exceeds the mininum 0'
	ENDIF
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 60000==0
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	JMP $
	ENDIF
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 60000==1
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 60000==2
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF 60000==3
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	NOP
	ENDIF
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (60000<8) AND (60000>3)
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAY3 + 7 -60000
	ENDIF
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (60000< 0404h) AND (60000>7)
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,60000/4-1
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX3 + 3 -(60000 MOD 4)
	ENDIF
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (60000< 0x40B) AND (60000> 0403h)
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0 
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYX6 + 0x40a -60000
	ENDIF
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (60000 >= 0x40b) AND ((((60000-9)%0402h)/4+1)>256)
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(60000-9)/0402h
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,0
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY5 +5- (((60000-9)%0402h)%6)
	ENDIF
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	IF (60000 >= 0x40b) AND ((((60000-9)%0402h)/4+1)<=256)
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,(60000-9)/0402h
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV _builtin_holtek_delay_2,A
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	MOV A,((60000-9)%0402h)/4+1
;# 205 "G:\xml\640\HT66F018\HT66F018.c" 1
	CALL __DELAYY3 +3-(((60000-9)%0402h)%4)
	ENDIF
#line 207 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,72
	call _SPI_READ
	mov ra,a
	mov a,ra
	mov _CMT_init_2[1],a
#line 208 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,170
	mov _SPI_WRITE_2[0],a
	mov a,72
	call _SPI_WRITE
#line 209 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,72
	call _SPI_READ
	mov ra,a
	mov a,ra
	mov _CMT_init_2[0],a
#line 210 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[1]
	mov _SPI_WRITE_2[0],a
	mov a,72
	call _SPI_WRITE
#line 211 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_CMT_init_2[0]
	sub a,170
	sz z
	jmp _L34
_L38:
	jmp _L38
_L34:
	ret
_CMT_init endp
#line 211 "G:\xml\640\HT66F018\HT66F018.c"
#pragma debug scope 1 1
___wdtc equ [26]
___intc0 equ [14]
___smod equ [11]
public _CMT_RX
#pragma debug scope 8 1
#line 216 "G:\xml\640\HT66F018\HT66F018.c"
_CMT_RX .section 'code'
_CMT_RX proc
#line 219 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,[37]
	mov ra,a
	mov a,4
	andm a,ra
	sz ra
	jmp _L39
#line 221 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,4
	call _FIFO_READ
#line 222 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,1
	mov _SPI_WRITE_2[0],a
	mov a,107
	call _SPI_WRITE
#line 223 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,16
	mov _SPI_WRITE_2[0],a
	mov a,96
	call _SPI_WRITE
#line 224 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_a_rx[0]
	mov ra,a
	mov a,ra
	sub a,85
	snz z
	jmp _L41
	mov a,_a_rx[1]
	mov ra,a
	mov a,ra
	sub a,170
	snz z
	jmp _L41
	mov a,_a_rx[2]
	mov ra,a
	mov a,ra
	sub a,170
	snz z
	jmp _L41
	mov a,_a_rx[3]
	mov ra,a
	mov a,ra
	sub a,85
	snz z
	jmp _L41
#line 226 "G:\xml\640\HT66F018\HT66F018.c"
	set _f_flag[0].0
#line 227 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,-56
	mov _a_bz[0],a
	clr _a_bz[1]
_L41:
#line 229 "G:\xml\640\HT66F018\HT66F018.c"
	clr _a_rx[0]
#line 230 "G:\xml\640\HT66F018\HT66F018.c"
	clr _a_rx[1]
#line 231 "G:\xml\640\HT66F018\HT66F018.c"
	clr _a_rx[2]
#line 232 "G:\xml\640\HT66F018\HT66F018.c"
	clr _a_rx[3]
_L42:
#line 237 "G:\xml\640\HT66F018\HT66F018.c"
	set [26].7
#line 238 "G:\xml\640\HT66F018\HT66F018.c"
	clr [26].6
#line 239 "G:\xml\640\HT66F018\HT66F018.c"
	set [26].5
#line 240 "G:\xml\640\HT66F018\HT66F018.c"
	clr [26].4
#line 241 "G:\xml\640\HT66F018\HT66F018.c"
	set [26].3
#line 242 "G:\xml\640\HT66F018\HT66F018.c"
	clr [14].0
#line 243 "G:\xml\640\HT66F018\HT66F018.c"
	clr [11].1
#line 244 "G:\xml\640\HT66F018\HT66F018.c"
;# 244 "G:\xml\640\HT66F018\HT66F018.c" 1
	clr wdt
#line 245 "G:\xml\640\HT66F018\HT66F018.c"
;# 245 "G:\xml\640\HT66F018\HT66F018.c" 1
	halt
#line 247 "G:\xml\640\HT66F018\HT66F018.c"
	jmp _L42
_L39:
	ret
_CMT_RX endp
#line 247 "G:\xml\640\HT66F018\HT66F018.c"
#pragma debug scope 1 1
___bp equ [4]
___mp1 equ [3]
___iar1 equ [2]
___cpc equ [62]
___acerl equ [36]
___pbc equ [38]
___pbpu equ [39]
___tm1al equ [58]
___tm1ah equ [59]
___tm1c0 equ [54]
___tm1c1 equ [55]
___intc1 equ [15]
public _initail
#pragma debug scope 9 1
#line 252 "G:\xml\640\HT66F018\HT66F018.c"
_initail .section 'code'
_initail proc
#line 253 "G:\xml\640\HT66F018\HT66F018.c"
	clr [4].0
#line 254 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,128
	mov [3],a
	jmp _L44
_L45:
#line 254 "G:\xml\640\HT66F018\HT66F018.c"
	clr [2]
	mov a,[3]
	mov ra,a
	inc ra
	mov a,ra
	mov [3],a
_L44:
	mov a,[3]
	mov ra,a
	siza ra
	jmp _L45
#line 255 "G:\xml\640\HT66F018\HT66F018.c"
	clr [2]
#line 256 "G:\xml\640\HT66F018\HT66F018.c"
	set [4].0
#line 257 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,128
	mov [3],a
	jmp _L46
_L47:
	clr [2]
	mov a,[3]
	mov ra,a
	inc ra
	mov a,ra
	mov [3],a
_L46:
	mov a,[3]
	mov ra,a
	siza ra
	jmp _L47
#line 258 "G:\xml\640\HT66F018\HT66F018.c"
	clr [2]
#line 260 "G:\xml\640\HT66F018\HT66F018.c"
	clr [62].7
#line 261 "G:\xml\640\HT66F018\HT66F018.c"
	set [62].3
#line 262 "G:\xml\640\HT66F018\HT66F018.c"
	clr [36]
#line 264 "G:\xml\640\HT66F018\HT66F018.c"
	set [38].2
#line 265 "G:\xml\640\HT66F018\HT66F018.c"
	set [39].2
#line 266 "G:\xml\640\HT66F018\HT66F018.c"
	clr [38].3
#line 267 "G:\xml\640\HT66F018\HT66F018.c"
	clr [21].7
#line 268 "G:\xml\640\HT66F018\HT66F018.c"
	clr [21].4
#line 269 "G:\xml\640\HT66F018\HT66F018.c"
	clr [21].5
#line 270 "G:\xml\640\HT66F018\HT66F018.c"
	set [20].4
#line 271 "G:\xml\640\HT66F018\HT66F018.c"
	clr [38].0
#line 272 "G:\xml\640\HT66F018\HT66F018.c"
	clr [37].0
#line 276 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,250
	mov [58],a
#line 277 "G:\xml\640\HT66F018\HT66F018.c"
	clr [59]
#line 279 "G:\xml\640\HT66F018\HT66F018.c"
	clr [54].6
#line 280 "G:\xml\640\HT66F018\HT66F018.c"
	clr [54].5
#line 281 "G:\xml\640\HT66F018\HT66F018.c"
	clr [54].4
#line 283 "G:\xml\640\HT66F018\HT66F018.c"
	set [55].7
#line 284 "G:\xml\640\HT66F018\HT66F018.c"
	set [55].6
#line 286 "G:\xml\640\HT66F018\HT66F018.c"
	set [55].0
#line 288 "G:\xml\640\HT66F018\HT66F018.c"
	set [54].3
#line 289 "G:\xml\640\HT66F018\HT66F018.c"
	set [18].1
#line 290 "G:\xml\640\HT66F018\HT66F018.c"
	set [15].0
#line 291 "G:\xml\640\HT66F018\HT66F018.c"
	set [14].0
#line 293 "G:\xml\640\HT66F018\HT66F018.c"
	call _CMT_init
#line 294 "G:\xml\640\HT66F018\HT66F018.c"
	set _f_flag[0].1
	ret
_initail endp
#line 294 "G:\xml\640\HT66F018\HT66F018.c"
#pragma debug scope 1 1
public _main
#pragma debug scope 10 1
#line 298 "G:\xml\640\HT66F018\HT66F018.c"
IFDEF WITH_DEFAULT_STARTUP
extern _main_initial0:near
extern _main_startup:near
ENDIF

ROMBANK 0 @start
@start .section com_l 'code'
_main_startup1:
@start .section com_e 'code'
	jmp _main

_main .section 'code'
_main proc
#line 300 "G:\xml\640\HT66F018\HT66F018.c"
	call _initail
_L50:
#line 303 "G:\xml\640\HT66F018\HT66F018.c"
;# 303 "G:\xml\640\HT66F018\HT66F018.c" 1
	clr wdt
#line 304 "G:\xml\640\HT66F018\HT66F018.c"
	mov a,_f_flag[1]
	mov ra,a
	mov a,4
	andm a,ra
	sz ra
	jmp _LI5
	jmp _L49
_LI5:
#line 306 "G:\xml\640\HT66F018\HT66F018.c"
	clr _f_flag[1].2
#line 307 "G:\xml\640\HT66F018\HT66F018.c"
	call _CMT_RX
#line 309 "G:\xml\640\HT66F018\HT66F018.c"
	jmp _L50
_L49:
	jmp _L50
	jmp $
_main endp

@dummy proc
	call _main
@dummy endp

#line 309 "G:\xml\640\HT66F018\HT66F018.c"
#pragma debug scope 1 1
#pragma debug variable 8 1 ___mp1 "__mp1" 1
#pragma debug struct_begin 46 "__bp_bits"
#pragma debug field 21 8 0 1 "__dmbp0" ;0,1
#pragma debug field 21 8 0 7 ;1,7
#pragma debug struct_end
#pragma debug union_begin 47 ""
#pragma debug field 2 46 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 47 1 ___bp "__bp" 1
#pragma debug struct_begin 48 "__smod_bits"
#pragma debug field 21 8 0 1 "__hlclk" ;0,1
#pragma debug field 21 8 0 1 "__idlen" ;1,1
#pragma debug field 21 8 0 1 "__hto" ;2,1
#pragma debug field 21 8 0 1 "__lto" ;3,1
#pragma debug field 21 8 0 1 "__fsten" ;4,1
#pragma debug field 21 8 0 1 "__cks0" ;5,1
#pragma debug field 21 8 0 1 "__cks1" ;6,1
#pragma debug field 21 8 0 1 "__cks2" ;7,1
#pragma debug struct_end
#pragma debug union_begin 49 ""
#pragma debug field 2 48 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 49 1 ___smod "__smod" 1
#pragma debug struct_begin 50 "__intc0_bits"
#pragma debug field 21 8 0 1 "__emi" ;0,1
#pragma debug field 21 8 0 1 "__int0e" ;1,1
#pragma debug field 21 8 0 1 "__cpe" ;2,1
#pragma debug field 21 8 0 1 "__mf0e" ;3,1
#pragma debug field 21 8 0 1 "__int0f" ;4,1
#pragma debug field 21 8 0 1 "__cpf" ;5,1
#pragma debug field 21 8 0 1 "__mf0f" ;6,1
#pragma debug field 21 8 0 1 ;7,1
#pragma debug struct_end
#pragma debug union_begin 51 ""
#pragma debug field 2 50 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 51 1 ___intc0 "__intc0" 1
#pragma debug struct_begin 52 "__intc1_bits"
#pragma debug field 21 8 0 1 "__mf1e" ;0,1
#pragma debug field 21 8 0 1 "__mf2e" ;1,1
#pragma debug field 21 8 0 1 "__ade" ;2,1
#pragma debug field 21 8 0 1 "__tb0e" ;3,1
#pragma debug field 21 8 0 1 "__mf1f" ;4,1
#pragma debug field 21 8 0 1 "__mf2f" ;5,1
#pragma debug field 21 8 0 1 "__adf" ;6,1
#pragma debug field 21 8 0 1 "__tb0f" ;7,1
#pragma debug struct_end
#pragma debug union_begin 53 ""
#pragma debug field 2 52 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 53 1 ___intc1 "__intc1" 1
#pragma debug struct_begin 54 "__mfi1_bits"
#pragma debug field 21 8 0 1 "__t1pe" ;0,1
#pragma debug field 21 8 0 1 "__t1ae" ;1,1
#pragma debug field 21 8 0 1 "__t2pe" ;2,1
#pragma debug field 21 8 0 1 "__t2ae" ;3,1
#pragma debug field 21 8 0 1 "__t1pf" ;4,1
#pragma debug field 21 8 0 1 "__t1af" ;5,1
#pragma debug field 21 8 0 1 "__t2pf" ;6,1
#pragma debug field 21 8 0 1 "__t2af" ;7,1
#pragma debug struct_end
#pragma debug union_begin 55 ""
#pragma debug field 2 54 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 55 1 ___mfi1 "__mfi1" 1
#pragma debug struct_begin 56 "__pa_bits"
#pragma debug field 21 8 0 1 "__pa0" ;0,1
#pragma debug field 21 8 0 1 "__pa1" ;1,1
#pragma debug field 21 8 0 1 "__pa2" ;2,1
#pragma debug field 21 8 0 1 "__pa3" ;3,1
#pragma debug field 21 8 0 1 "__pa4" ;4,1
#pragma debug field 21 8 0 1 "__pa5" ;5,1
#pragma debug field 21 8 0 1 "__pa6" ;6,1
#pragma debug field 21 8 0 1 "__pa7" ;7,1
#pragma debug struct_end
#pragma debug union_begin 57 ""
#pragma debug field 2 56 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 57 1 ___pa "__pa" 1
#pragma debug struct_begin 58 "__pac_bits"
#pragma debug field 21 8 0 1 "__pac0" ;0,1
#pragma debug field 21 8 0 1 "__pac1" ;1,1
#pragma debug field 21 8 0 1 "__pac2" ;2,1
#pragma debug field 21 8 0 1 "__pac3" ;3,1
#pragma debug field 21 8 0 1 "__pac4" ;4,1
#pragma debug field 21 8 0 1 "__pac5" ;5,1
#pragma debug field 21 8 0 1 "__pac6" ;6,1
#pragma debug field 21 8 0 1 "__pac7" ;7,1
#pragma debug struct_end
#pragma debug union_begin 59 ""
#pragma debug field 2 58 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 59 1 ___pac "__pac" 1
#pragma debug struct_begin 60 "__wdtc_bits"
#pragma debug field 21 8 0 1 "__ws0" ;0,1
#pragma debug field 21 8 0 1 "__ws1" ;1,1
#pragma debug field 21 8 0 1 "__ws2" ;2,1
#pragma debug field 21 8 0 1 "__we0" ;3,1
#pragma debug field 21 8 0 1 "__we1" ;4,1
#pragma debug field 21 8 0 1 "__we2" ;5,1
#pragma debug field 21 8 0 1 "__we3" ;6,1
#pragma debug field 21 8 0 1 "__we4" ;7,1
#pragma debug struct_end
#pragma debug union_begin 61 ""
#pragma debug field 2 60 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 61 1 ___wdtc "__wdtc" 1
#pragma debug struct_begin 62 "__acerl_bits"
#pragma debug field 21 8 0 1 "__ace0" ;0,1
#pragma debug field 21 8 0 1 "__ace1" ;1,1
#pragma debug field 21 8 0 1 "__ace2" ;2,1
#pragma debug field 21 8 0 1 "__ace3" ;3,1
#pragma debug field 21 8 0 1 "__ace4" ;4,1
#pragma debug field 21 8 0 1 "__ace5" ;5,1
#pragma debug field 21 8 0 1 "__ace6" ;6,1
#pragma debug field 21 8 0 1 "__ace7" ;7,1
#pragma debug struct_end
#pragma debug union_begin 63 ""
#pragma debug field 2 62 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 63 1 ___acerl "__acerl" 1
#pragma debug struct_begin 64 "__pb_bits"
#pragma debug field 21 8 0 1 "__pb0" ;0,1
#pragma debug field 21 8 0 1 "__pb1" ;1,1
#pragma debug field 21 8 0 1 "__pb2" ;2,1
#pragma debug field 21 8 0 1 "__pb3" ;3,1
#pragma debug field 21 8 0 1 "__pb4" ;4,1
#pragma debug field 21 8 0 1 "__pb5" ;5,1
#pragma debug field 21 8 0 1 "__pb6" ;6,1
#pragma debug field 21 8 0 1 ;7,1
#pragma debug struct_end
#pragma debug union_begin 65 ""
#pragma debug field 2 64 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 65 1 ___pb "__pb" 1
#pragma debug struct_begin 66 "__pbc_bits"
#pragma debug field 21 8 0 1 "__pbc0" ;0,1
#pragma debug field 21 8 0 1 "__pbc1" ;1,1
#pragma debug field 21 8 0 1 "__pbc2" ;2,1
#pragma debug field 21 8 0 1 "__pbc3" ;3,1
#pragma debug field 21 8 0 1 "__pbc4" ;4,1
#pragma debug field 21 8 0 1 "__pbc5" ;5,1
#pragma debug field 21 8 0 1 "__pbc6" ;6,1
#pragma debug field 21 8 0 1 ;7,1
#pragma debug struct_end
#pragma debug union_begin 67 ""
#pragma debug field 2 66 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 67 1 ___pbc "__pbc" 1
#pragma debug struct_begin 68 "__pbpu_bits"
#pragma debug field 21 8 0 1 "__pbpu0" ;0,1
#pragma debug field 21 8 0 1 "__pbpu1" ;1,1
#pragma debug field 21 8 0 1 "__pbpu2" ;2,1
#pragma debug field 21 8 0 1 "__pbpu3" ;3,1
#pragma debug field 21 8 0 1 "__pbpu4" ;4,1
#pragma debug field 21 8 0 1 "__pbpu5" ;5,1
#pragma debug field 21 8 0 1 "__pbpu6" ;6,1
#pragma debug field 21 8 0 1 ;7,1
#pragma debug struct_end
#pragma debug union_begin 69 ""
#pragma debug field 2 68 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 69 1 ___pbpu "__pbpu" 1
#pragma debug struct_begin 70 "__tm1c0_bits"
#pragma debug field 21 8 0 3 ;0,3
#pragma debug field 21 8 0 1 "__t1on" ;3,1
#pragma debug field 21 8 0 1 "__t1ck0" ;4,1
#pragma debug field 21 8 0 1 "__t1ck1" ;5,1
#pragma debug field 21 8 0 1 "__t1ck2" ;6,1
#pragma debug field 21 8 0 1 "__t1pau" ;7,1
#pragma debug struct_end
#pragma debug union_begin 71 ""
#pragma debug field 2 70 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 71 1 ___tm1c0 "__tm1c0" 1
#pragma debug struct_begin 72 "__tm1c1_bits"
#pragma debug field 21 8 0 1 "__t1cclr" ;0,1
#pragma debug field 21 8 0 1 "__t1capts" ;1,1
#pragma debug field 21 8 0 1 "__t1pol" ;2,1
#pragma debug field 21 8 0 1 "__t1oc" ;3,1
#pragma debug field 21 8 0 1 "__t1io0" ;4,1
#pragma debug field 21 8 0 1 "__t1io1" ;5,1
#pragma debug field 21 8 0 1 "__t1m0" ;6,1
#pragma debug field 21 8 0 1 "__t1m1" ;7,1
#pragma debug struct_end
#pragma debug union_begin 73 ""
#pragma debug field 2 72 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 73 1 ___tm1c1 "__tm1c1" 1
#pragma debug variable 8 1 ___tm1al "__tm1al" 1
#pragma debug variable 8 1 ___tm1ah "__tm1ah" 1
#pragma debug struct_begin 74 "__cpc_bits"
#pragma debug field 21 8 0 1 "__chyen" ;0,1
#pragma debug field 21 8 0 2 ;1,2
#pragma debug field 21 8 0 1 "__cos" ;3,1
#pragma debug field 21 8 0 1 "__cout" ;4,1
#pragma debug field 21 8 0 1 "__cpol" ;5,1
#pragma debug field 21 8 0 1 "__cen" ;6,1
#pragma debug field 21 8 0 1 "__csel" ;7,1
#pragma debug struct_end
#pragma debug union_begin 75 ""
#pragma debug field 2 74 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 75 1 ___cpc "__cpc" 1
#pragma debug variable 8 1 ___iar1 "__iar1" 1
extern r1:byte
extern r2:byte
#line 298 "G:\xml\640\HT66F018\HT66F018.c"
@code .section at 0 'code'
	jmp _main_startup1


; 
; Generated by holtek-gcc v3.14, Wed May 30 19:21:49 2018
; Rebuild 10
; end of file
